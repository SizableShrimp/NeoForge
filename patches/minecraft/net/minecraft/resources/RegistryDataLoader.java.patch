--- a/net/minecraft/resources/RegistryDataLoader.java
+++ b/net/minecraft/resources/RegistryDataLoader.java
@@ -123,7 +_,7 @@
    }
 
    private static String m_246502_(ResourceLocation p_252033_) {
-      return p_252033_.m_135815_();
+      return net.minecraftforge.common.ForgeHooks.prefixNamespace(p_252033_); // FORGE: add non-vanilla registry namespace to loader directory, same format as tag directory (see net.minecraft.tags.TagManager#getTagDir(ResourceKey))
    }
 
    static <E> void m_255048_(RegistryOps.RegistryInfoLookup p_256369_, ResourceManager p_256349_, ResourceKey<? extends Registry<E>> p_255792_, WritableRegistry<E> p_256211_, Decoder<E> p_256232_, Map<ResourceKey<?>, Exception> p_255884_) {
@@ -139,6 +_,7 @@
          try (Reader reader = resource.m_215508_()) {
             JsonElement jsonelement = JsonParser.parseReader(reader);
             DataResult<E> dataresult = p_256232_.parse(registryops, jsonelement);
+               if (!net.minecraftforge.common.crafting.conditions.ICondition.shouldRegisterEntry(jsonelement)) continue;
             E e = dataresult.getOrThrow(false, (p_248715_) -> {
             });
             p_256211_.m_255290_(resourcekey, e, resource.m_247137_() ? Lifecycle.stable() : dataresult.lifecycle());
@@ -156,6 +_,7 @@
    public static record RegistryData<T>(ResourceKey<? extends Registry<T>> f_243794_, Codec<T> f_244580_) {
       Pair<WritableRegistry<?>, RegistryDataLoader.Loader> m_245364_(Lifecycle p_251662_, Map<ResourceKey<?>, Exception> p_251565_) {
          WritableRegistry<T> writableregistry = new MappedRegistry<>(this.f_243794_, p_251662_);
+         net.minecraftforge.registries.RegistryManager.postModifyRegistryEvent(writableregistry);
          RegistryDataLoader.Loader registrydataloader$loader = (p_255511_, p_255512_) -> {
             RegistryDataLoader.m_255048_(p_255512_, p_255511_, this.f_243794_, writableregistry, this.f_244580_, p_251565_);
          };
